using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.Logging;
using lmsextreg.Data;
using lmsextreg.Models;
using lmsextreg.Constants;
using lmsextreg.Services;

namespace lmsextreg.Pages.Approvals
{
    [Authorize(Roles = "APPROVER")]
    public class IndexModel: PageModel
    {
        private readonly ApplicationDbContext _dbContext;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ISessionCookieService _sessionCookieService;
        private readonly ILogger<IndexModel> _logger;


        public IndexModel(  lmsextreg.Data.ApplicationDbContext dbCntx,
                            UserManager<ApplicationUser> usrMgr,
                            ISessionCookieService sessionCookieSvc,
                            ILogger<IndexModel> logger)
        {
            _dbContext = dbCntx;
            _userManager = usrMgr;
            _sessionCookieService = sessionCookieSvc;
            _logger = logger;
        }

        public IList<ProgramEnrollment> ProgramEnrollment { get;set; }
        public ApplicationUser LoggedInUser {get;set;}

        public string PENDING   = StatusCodeConstants.PENDING;
        public string WITHDRAWN = StatusCodeConstants.WITHDRAWN;
        public string APPROVED  = StatusCodeConstants.APPROVED;
        public string DENIED    = StatusCodeConstants.DENIED;
        public string REVOKED   = StatusCodeConstants.REVOKED;

        public async Task OnGetAsync()
        {
            LoggedInUser = await GetCurrentUserAsync();

            if ( User.IsInRole(RoleConstants.APPROVER))
            {
                var loggedInUserID = _userManager.GetUserId(User);

                ///////////////////////////////////////////////////////////////
                // Make sure that the logged-in user with the role of approver
                // is authorized to approve /deny /revoke enrollment
                // requests for this particular LMS Program.
                //////////////////////////////////////////////////////////////
                // PostgreSQL
                /////////////////////////////////////////////////////////////////////////                
                // var sql = " SELECT * "
                //         + " FROM " + MiscConstants.DB_SCHEMA_NAME +  ".\"ProgramEnrollment\" "
                //         + " WHERE \"LMSProgramID\" " 
                //         + " IN "
                //         + " ( "
                //         + "   SELECT \"LMSProgramID\" "
                //         + "   FROM " + MiscConstants.DB_SCHEMA_NAME +  ".\"ProgramApprover\" "
		            //     + "   WHERE \"ApproverUserId\" = {0} "
	              //       + " ) ";
              /////////////////////////////////////////////////////////////////////////
              // MySQL
              /////////////////////////////////////////////////////////////////////////
              var sql = " SELECT * "
                      + " FROM " + MiscConstants.DB_SCHEMA_NAME +  ".ProgramEnrollment "
                      + " WHERE LMSProgramID " 
                      + " IN "
                      + " ( "
                      + "   SELECT LMSProgramID "
                      + "   FROM " + MiscConstants.DB_SCHEMA_NAME +  ".ProgramApprover "
                  + "   WHERE ApproverUserId = {0} "
                    + " ) ";
            /////////////////////////////////////////////////////////////////////////

            // Console.WriteLine("SQL: ");
            // Console.WriteLine(sql);                        

            ProgramEnrollment  = await _dbContext.ProgramEnrollments
                                .FromSql(sql, loggedInUserID)
                                .Include( pe =>  pe.LMSProgram)
                                .Include ( pe => pe.Student).ThenInclude(s => s.Agency)
                                .Include( pe => pe.EnrollmentStatus)
                                .Include( pe => pe.Approver)
                                .OrderBy( pe => pe.LMSProgram.LongName)
                                    .ThenBy(pe => pe.Student.FullName)
                                    .ThenBy(pe => pe.EnrollmentStatus.StatusCode)
                                .ToListAsync();
            }
        }
        private Task<ApplicationUser> GetCurrentUserAsync() => _userManager.GetUserAsync(HttpContext.User);

        public override void OnPageHandlerSelected(PageHandlerSelectedContext filterContext)
        {
            string tagName = "[Approvals][IndexModel][OnPageHandlerSelected]";

            ApplicationUser appUser = _userManager.GetUserAsync(HttpContext.User).Result;
            
            string pageRedirect = _sessionCookieService.DeterminePageRedirect(appUser.UserName, tagName);
            if ( pageRedirect != null )
            {
                filterContext.HttpContext.Response.Redirect(pageRedirect);
                return;
            }
            
            _logger.LogInformation(tagName + " => Refreshing SessinCookie for '" + appUser.UserName + "'");
            _sessionCookieService.RefreshSessionCookie(appUser.UserName);
        }
    }
}