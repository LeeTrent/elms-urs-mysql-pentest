using System;
using System.Text;
using Microsoft.Extensions.Logging;
using lmsextreg.Repositories;
using lmsextreg.Models;

namespace lmsextreg.Services
{
    public class SessionCookieService : ISessionCookieService
    {
        private readonly ISessionCookieRepository _sessionCookieRepo;
        private readonly ILogger<SessionCookieService> _logger;

        public SessionCookieService (   ISessionCookieRepository sessionCookieRepository,
                                        ILogger<SessionCookieService> logger
                                    )
        {
            _sessionCookieRepo = sessionCookieRepository;
            _logger = logger;
        }

        public void LogSession (string userName, string cookieName, string cookieValue)
        {
           var sessionCookie = new SessionCookie
            {
                UserName = userName,
                CookieName = cookieName,
                CookieValue = cookieValue,
                LastAccessedOn = DateTime.Now
            };

            _sessionCookieRepo.Create(sessionCookie);

        }
 
        public SessionCookie RetrieveSessionCookie(string cookieValue)
        {
            return _sessionCookieRepo.Retrieve(cookieValue);
        }

        public bool isValidSession(string cookieName, string cookieValue)
        {
            var sessionCookie = _sessionCookieRepo.Retrieve(cookieValue);

            if ( sessionCookie == null )
            {
                StringBuilder sb = new StringBuilder("SessionCookie with the following value was not found: '");
                sb.Append(cookieValue);
                sb.Append("'.");
                _logger.LogInformation(sb.ToString());

                return false;
            }

            if ( DateTime.Now > sessionCookie.LastAccessedOn.AddMinutes(30) )
            {
                StringBuilder sb = new StringBuilder("SessionCookie with the following value has expired: '");
                sb.Append(cookieValue);
                sb.Append("'.");
                sb.Append("\nThis SessionCookie was last accession on: ");
                sb.Append(sessionCookie.LastAccessedOn);
                sb.Append(".");
                _logger.LogInformation(sb.ToString());

                return false;
            }

            return true;
        }

        public void refreshSessionCookie(string cookieName, string cookieValue)
        {
            var sessionCookie = _sessionCookieRepo.Retrieve(cookieValue);

            if ( sessionCookie == null )
            {
                StringBuilder sb = new StringBuilder("SessionCookie with the following value was not found: '");
                sb.Append(cookieValue);
                sb.Append("'.");
                sb.Append("\nCannot refresh session cookie.");

                string errMsg = sb.ToString();

                _logger.LogInformation(errMsg);
                throw new Exception(errMsg);
            }

            sessionCookie.LastAccessedOn = DateTime.Now;
            _sessionCookieRepo.Update(sessionCookie);
        }
    }
}